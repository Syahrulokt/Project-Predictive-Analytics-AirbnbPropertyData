# -*- coding: utf-8 -*-
"""Prediksi Harga Sewa Properti Airbnb di Seattle Menggunakan Pendekatan CRISP-DM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c8izmlkY-lw8y1A4dThQgazDKQFGDMZy

**Prediksi Harga Sewa Properti Airbnb di Seattle Menggunakan Pendekatan CRISP-DM**

- **Nama:** Mochammad Syahrul Abidin
- **Email:** mc332d5y1816@student.devacademy.id
- **ID Dicoding:** MC332D5Y1816

---

### CRISP-DM
Proses CRISP-DM melibatkan langkah-langkah berikut:
1. Business Understanding
2. Data Understanding
3. Data Preparation
4. Modelling
5. Evaluation
6. Deployment
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re

from google.colab import drive
drive.mount('/content/drive')

dl = pd.read_csv('/content/drive/MyDrive/CODING CAMP 2025/Project Machine Learning Terapan/Prediksi Harga Sewa Properti Airbnb di Seattle Menggunakan Pendekatan CRISP-DM/listings.csv')
dr = pd.read_csv('/content/drive/MyDrive/CODING CAMP 2025/Project Machine Learning Terapan/Prediksi Harga Sewa Properti Airbnb di Seattle Menggunakan Pendekatan CRISP-DM/reviews.csv')
dc = pd.read_csv('/content/drive/MyDrive/CODING CAMP 2025/Project Machine Learning Terapan/Prediksi Harga Sewa Properti Airbnb di Seattle Menggunakan Pendekatan CRISP-DM/calendar.csv')

"""---

___

### 1. Business Understanding

Dalam tinjauan awal terhadap skema data, berikut beberapa pertanyaan yang ingin dijawab:
1. Apa saja area dengan peringkat tertinggi untuk memesan akomodasi di Seattle?
2. Apa saja lingkungan dengan revenue tertinggi di Seattle?
3. Apa saja fasilitas yang paling banyak disediakan oleh tuan rumah di Seattle?
4. Skor mana yang paling penting untuk ratings keseluruhan?(Linear Regression)
5. Apakah tuan rumah dengan ratings lebih tinggi secara keseluruhan menghasilkan revenue lebih tinggi?(Linear Regression)
6. Fasilitas, karakteristik perumahan, dan faktor apa yang berkontribusi positif terhadap revenue?(Linear Regression)
7. Fasilitas, karakteristik perumahan, dan faktor apa yang berkontribusi positif terhadap ratings?(Analisis Linear Regression)

___

### 2. Data Understanding

Data Airbnb yang disediakan adalah untuk kota Seattle, Washington selama periode 2016-2017:
1. **Listings.csv** berisi rincian properti dan harga
2. **Reviews.csv** berisi ulasan setelah menginap di rumah
3. **Calendar.csv** berisi harga untuk daftar pada hari-hari tertentu
"""

dl.info()

"""Ada 92 fitur dengan tipe campuran. Beberapa fitur tidak sesuai dengan tipe data yang diharapkan dan akan memerlukan pembersihan dan persiapan."""

dr.info()

"""Ada 6 fitur dengan tipe campuran. Fitur-fitur memenuhi tipe data yang diharapkan, tetapi beberapa transformasi mungkin diperlukan untuk data string."""

dc.info()

"""Ada 4 fitur dengan tipe campuran. Beberapa fitur seperti harga tidak sesuai dengan tipe data yang diharapkan dan akan memerlukan pembersihan dan persiapan."""

dl.head()

"""Berikut adalah statistik ringkasan dari fitur numerik."""

pd.set_option('display.max_rows', None)
dl.describe().T
pd.set_option('display.max_rows', 10)

"""Terdapat fitur yang memiliki tipe data yang tidak terduga atau ambigu dalam konten di Listings untuk mendapatkan pemahaman yang lengkap:"""

investigate_features = [
'host_response_time',
'host_response_rate',
'host_acceptance_rate',
'host_is_superhost',
'host_verifications',
'host_has_profile_pic',
'host_identity_verified',
'neighbourhood_cleansed',
'neighbourhood_group_cleansed',
'zipcode',
'market',
'smart_location',
'is_location_exact',
'price',
'weekly_price',
'monthly_price',
'security_deposit',
'cleaning_fee',
'extra_people',
'calendar_updated',
'has_availability',
'calendar_last_scraped',
'requires_license',
'license',
'instant_bookable',
'cancellation_policy',
'require_guest_profile_picture',
'require_guest_phone_verification'
]

for feature in investigate_features:
    print('{}:'.format(feature))
    print(dl[feature].unique()[:10])
    print('')

"""**Fitur yang bukan numerik tetapi seharusnya numerik termasuk:**
1. 'price'
2. 'weekly_price'
3. 'monthly_price'
4. 'security_deposit'
5. 'cleaning_fee'
6. 'extra_people'
7. 'host_response_rate'
8. 'host_acceptance_rate'
9. 'zipcode' *(keep as non-numeric categorical)*

Semua ini mewakili jumlah dolar atau persentase dan telah diformat sebagai string dengan tanda baca '$', ',', dan '%'. Kode pos secara khusus mengandung kesalahan melalui penambahan karakter pelarian dan seharusnya berupa bilangan bulat biasa.

**Fitur yang non-numerik dan merupakan boolean kategorikal termasuk:**
1. 'host_has_profile_pic'
2. 'host_identity_verified'
3. 'is_location_exact'
4. 'has_availability'
5. 'requires_license'
6. 'instant_bookable'
7. 'require_guest_profile_picture'
8. 'require_guest_phone_verification'

Ini mewakili data kategorikal boolean benar atau salah. Ini memerlukan one-hot encoding.

**Fitur yang non-numerik dan kategorikal serta mungkin menunjukkan ordinalitas termasuk:**
1. 'host_response_time
2. 'host_is_superhost'
3. 'calendar_updated'
4. 'cancellation_policy'

**Fitur yang sudah dibersihkan sebelumnya dan kategorikal non-numerik:**
1. 'neighbourhood_cleansed'
2. 'neighbourhood_group_cleansed'
"""

dr.head()

"""Data dalam Ulasan adalah ortodoks tanpa perlu konversi."""

dc.head()

"""**Identifikasi Missing Values**"""

def find_missing(data):
    '''
    INPUT:
    data - DataFrame containing values.
    OUTPUT:
    DataFrame - DataFrame containing missing values count & percentage by feature, only if missing
    '''
    missing_pc = [sum(data[x].isna() == True) / data.shape[0] for x in data.columns]
    missing = [sum(data[x].isna() == True) for x in data.columns]
    out = pd.DataFrame([data.columns, missing, missing_pc]).T
    out.columns = ['Feature', 'Missing', 'Missing %']
    out = out[out['Missing'] > 0]
    return out

missing = find_missing(data=dl)
display('Listings - % Missing')
pd.set_option('display.max_rows', None)
display(missing)
pd.set_option('display.max_rows', 10)

missing = find_missing(data=dr)
display('Reviews - % Missing')
display(missing)

missing = find_missing(data=dc)
display('Calendar - % Missing')
display(missing)

"""Sehubungan dengan pertanyaan-pertanyaan yang telah disebutkan sebelumnya yang ingin saya teliti secara rinci di bagian sebelumnya, saya merasa fitur-fitur yang menarik bagi saya adalah sebagai berikut:
- Listings
    1. listing_id
    2. host_response_rate
    3. host_acceptance_rate
    4. host_is_superhost
    5. host_total_listings_count
    6. host_identity_verified
    7. neighbourhood_cleansed
    8. neighbourhood_group_cleansed
    9. latitude
    10. longitude
    11.  property_type
    12.  room_type
    13.  accommodates
    14.  bathrooms
    15.  bedrooms
    16.  beds
    17.  amenities
    18.  price
    19.  security_deposit
    20.  cleaning_fee
    21.  extra_people
    22.  minimum_nights
    23.  number_of_reviews
    24.  review_scores_rating
    25.  review_scores_accuracy
    26.  review_scores_cleanliness
    27.  review_scores_checkin
    28.  review_scores_communication
    29.  review_scores_location
    30.  review_scores_value
    31.  instant_bookable
    32.  cancellation_policy
    33.  reviews_per_month
- Reviews
    1. listing_id
    2. id
- Calendar
    1. n/a

___

### 3. Data Preparation

Untuk variabel-variabel yang memerlukan penyesuaian dan imputasi nilai yang hilang, saya mengelompokkannya berdasarkan tipe data dan melakukan operasi untuk mempersiapkan sebelum pemodelan.
"""

data = dl.copy()

data.rename(columns={'id': 'listing_id'}, inplace=True)

"""**Fitur Numeric**

Mengonversi tipe data string menjadi persentase dalam interval [0, 1].
"""

data['host_response_rate'] = data['host_response_rate'].str.replace('[% ]', '', regex=True).astype(float)
data['host_response_rate'] = data['host_response_rate'] * 0.01

data['host_acceptance_rate'].unique()

data['host_acceptance_rate'] = data['host_acceptance_rate'].str.replace('[% ]', '', regex=True).astype(float)
data['host_acceptance_rate'] = data['host_acceptance_rate'] * 0.01

"""Mengubah boolean kategorikal menjadi dummy biner."""

data['host_is_superhost'].replace('t', 1, inplace=True)
data['host_is_superhost'].replace('f', 0, inplace=True)
sum(data['host_is_superhost'].isna()==True)

data['host_identity_verified'].replace('t', 1, inplace=True)
data['host_identity_verified'].replace('f', 0, inplace=True)
sum(data['host_identity_verified'].isna()==True)

"""Menghapus tanda baca *'$', ','* dari variabel monetary dan menyimpannya sebagai float."""

data['price'] = data['price'].str.replace('[$, ]', '', regex=True).astype(float)
data['security_deposit'] = data['security_deposit'].str.replace('[$, ]', '', regex=True).astype(float)
data['cleaning_fee'] = data['cleaning_fee'].str.replace('[$, ]', '', regex=True).astype(float)
data['extra_people'] = data['extra_people'].str.replace('[$, ]', '', regex=True).astype(float)

data['instant_bookable'].replace('t', 1, inplace=True)
data['instant_bookable'].replace('f', 0, inplace=True)
sum(data['instant_bookable'].isna()==True)

"""**Fitur Categorical**

Mengidentifikasi apakah fitur kategorikal memiliki missing values.
"""

data['neighbourhood_cleansed'].unique()

data['neighbourhood_group_cleansed'].unique()

data['property_type'].unique()

data['room_type'].unique()

data['cancellation_policy'].unique()

"""####**Mengisi Missing Values**

Untuk nilai yang hilang, menggunakan lingkungan yang menunjukkan area granular di mana properti dengan komposisi serupa mungkin berada. menggunakan nilai median untuk fitur yang dikelompokkan oleh lingkungan untuk mengisi nilai yang hilang.

Untuk variabel biner dan nilai integer yang hilang, mengisi nilai tersebut dengan 0 dengan asumsi bahwa pengguna aplikasi Airbnb lebih cenderung menghindari mengisi informasi ketika tidak relevan bagi mereka. Di mana data yang dihasilkan oleh Airbnb hilang, maka dapat diasumsikan tidak ada data untuk fitur tersebut.
"""

data['host_response_rate'] = data['host_response_rate'].fillna(data.groupby('neighbourhood_cleansed')['host_response_rate'].transform('median'))

data['host_acceptance_rate'].fillna(0, inplace=True)

for listing in data[data['host_total_listings_count'].isna() == True]['listing_id']:
    display('[{}] has {} listing.'.format(listing, data[data['listing_id'] == listing].shape[0]))

data['host_total_listings_count'].fillna(1, inplace=True)

data['host_total_listings_count'].unique()

data['host_is_superhost'].fillna(0, inplace=True)

data['host_identity_verified'].fillna(0, inplace=True)

data[data['property_type'].isna()==True]['description'].iloc[0]
data['property_type'].fillna('Apartment', inplace=True)

"""Menggunakan median dalam kasus-kasus ini. Nilai untuk jumlah bathrooms ditetapkan pada batas bawah 1."""

display(data[data['bathrooms'].isna()==True][['bedrooms', 'bathrooms']])
data['bathrooms'].fillna(1, inplace=True)

display(data[data['bedrooms'].isna()==True][['bedrooms', 'bathrooms', 'beds']])
data['bedrooms'].fillna(data.groupby('beds')['beds'].transform('median'), inplace=True)

display(data[data['beds'].isna()==True][['bedrooms', 'bathrooms', 'beds']])
data['beds'].fillna(1, inplace=True)

display(data['minimum_nights'].unique())
data['minimum_nights'] = data['minimum_nights'].replace(1000, data['minimum_nights'].median())

"""Menetapkan review scores yang hilang ke median untuk neighbourhood tersebut."""

data['review_scores_rating'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_rating'].transform('median'), inplace=True)
data['review_scores_accuracy'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_accuracy'].transform('median'), inplace=True)
data['review_scores_cleanliness'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_cleanliness'].transform('median'), inplace=True)
data['review_scores_checkin'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_checkin'].transform('median'), inplace=True)
data['review_scores_communication'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_communication'].transform('median'), inplace=True)
data['review_scores_location'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_location'].transform('median'), inplace=True)
data['review_scores_value'].fillna(data.groupby('neighbourhood_cleansed')['review_scores_value'].transform('median'), inplace=True)

"""Dapat diasumsikan bahwa data berikut hilang karena tidak relevan bagi tuan rumah dan oleh karena itu tidak dimasukkan (dibebankan kepada tamu), atau Airbnb tidak memiliki informasi karena secara intuitif tidak ada reviews."""

data['reviews_per_month'].fillna(0, inplace=True)

data['security_deposit'].fillna(0, inplace=True)
data['cleaning_fee'].fillna(0, inplace=True)
data['extra_people'].fillna(0, inplace=True)

"""####**Feature Engineering**

Menghasilkan fitur baru yang merupakan perkiraan revenue dan dihitung sebagai produk dari harga untuk listings dan jumlah minimum malam yang diharapkan oleh tuan rumah agar tamu memesan. Ini bukan ukuran yang akurat tetapi ukuran yang lebih mendekati yang mungkin dihasilkan sebagai proksi untuk perkiraan revenue bagi seorang tuan rumah.
"""

reservations = pd.merge(dr, data, on='listing_id')

reservations['revenue'] = reservations['price'] * reservations['minimum_nights']
revenue = reservations[['listing_id', 'revenue']].groupby(['listing_id']).sum()

data = pd.merge(data, revenue, on='listing_id', how='left')
data['revenue'].fillna(0, inplace=True)

"""Menghasilkan dummy biner untuk fasilitas yang disimpan sebagai objek JSON per listing setelah menyamakan berbagai fasilitas sebagai fitur kategorikal yang unik."""

amenities = []
for amenity in data['amenities'].unique():
    amenities.extend(amenity.strip('{}').split(','))
amenities = pd.DataFrame(amenities)
amenities = pd.DataFrame(amenities[0].unique(), columns=['amenity'])
for i in range(len(amenities['amenity'])):
    for j in ['"']:
        amenities['amenity'].iloc[i] = re.sub(j, '', amenities['amenity'].iloc[i])
amenities.drop(amenities.index[36], inplace=True)

amenity_types = amenities['amenity'].unique()
amenity = pd.DataFrame(data[['listing_id', 'amenities']])
for i in range(len(amenity_types)):
    for j in ['"', ' ', '/', '-', '\(', '\)']:
        amenity_types[i] = re.sub(j, '', amenity_types[i])
    amenity['amenity_{}'.format(amenity_types[i])] = 0

for i in range(amenity.shape[0]):
    comparison = amenity['amenities'].iloc[i]
    comparison = comparison.strip('{}')
    for j in ['"', ' ', '/', '-', '\(', '\)']:
        comparison = re.sub(j, '', comparison)
    comparison = comparison.split(',')
    for idx in amenity_types:
        if idx in comparison:
            amenity['amenity_{}'.format(idx)].iloc[i] = 1

amenity.head()

amenity.drop('amenities', axis=1, inplace=True)

data = pd.merge(data, amenity, on='listing_id')

"""####**Feature Encoding**

Menghasilkan dummy biner One-Hot Encoded untuk fitur kategorikal dengan lebih dari (2) nilai unik yang mungkin.
"""

from sklearn.preprocessing import OneHotEncoder

one_hot_encoder = OneHotEncoder(sparse_output=False)

ohe_neighbourhood_group_cleansed = pd.DataFrame(
    one_hot_encoder.fit_transform(data['neighbourhood_group_cleansed'].to_numpy().reshape(-1, 1)),
    columns=one_hot_encoder.get_feature_names_out()
)
ohe_neighbourhood_group_cleansed.columns = [x.replace('x0', 'nbdg') for x in ohe_neighbourhood_group_cleansed.columns]
ohe_neighbourhood_group_cleansed['listing_id'] = data['listing_id']

ohe_property_type = pd.DataFrame(
    one_hot_encoder.fit_transform(data['property_type'].to_numpy().reshape(-1, 1)),
    columns=one_hot_encoder.get_feature_names_out()
)
ohe_property_type.columns = [x.replace('x0', 'property') for x in ohe_property_type.columns]
ohe_property_type['listing_id'] = data['listing_id']

ohe_room_type = pd.DataFrame(
    one_hot_encoder.fit_transform(data['room_type'].to_numpy().reshape(-1, 1)),
    columns=one_hot_encoder.get_feature_names_out()
)
ohe_room_type.columns = [x.replace('x0', 'room') for x in ohe_room_type.columns]
ohe_room_type['listing_id'] = data['listing_id']

ohe_cancellation_policy = pd.DataFrame(
    one_hot_encoder.fit_transform(data['cancellation_policy'].to_numpy().reshape(-1, 1)),
    columns=one_hot_encoder.get_feature_names_out()
)
ohe_cancellation_policy.columns = [x.replace('x0', 'cancel') for x in ohe_cancellation_policy.columns]
ohe_cancellation_policy['listing_id'] = data['listing_id']

"""####**Feature Scaling**

Scaling fitur numerik karena memiliki skew umum ke kiri atau kanan (terutama ratings dan revenue) agar menyerupai variabel acak normal standar yang kemudian ditransformasikan untuk berada pada interval [0, 1].
"""

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler

standard_scaler = StandardScaler()
min_max_scaler = MinMaxScaler()

data['beds'] = standard_scaler.fit_transform(data['beds'].to_numpy().reshape(-1, 1))
data['bedrooms'] = standard_scaler.fit_transform(data['bedrooms'].to_numpy().reshape(-1, 1))
data['bathrooms'] = standard_scaler.fit_transform(data['bathrooms'].to_numpy().reshape(-1, 1))
data['accommodates'] = standard_scaler.fit_transform(data['accommodates'].to_numpy().reshape(-1, 1))
data['host_total_listings_count'] = standard_scaler.fit_transform(data['host_total_listings_count'].to_numpy().reshape(-1, 1))
data['review_scores_accuracy'] = standard_scaler.fit_transform(data['review_scores_accuracy'].to_numpy().reshape(-1, 1))
data['review_scores_cleanliness'] = standard_scaler.fit_transform(data['review_scores_cleanliness'].to_numpy().reshape(-1, 1))
data['review_scores_checkin'] = standard_scaler.fit_transform(data['review_scores_checkin'].to_numpy().reshape(-1, 1))
data['review_scores_communication'] = standard_scaler.fit_transform(data['review_scores_communication'].to_numpy().reshape(-1, 1))
data['review_scores_location'] = standard_scaler.fit_transform(data['review_scores_location'].to_numpy().reshape(-1, 1))
data['review_scores_value'] = standard_scaler.fit_transform(data['review_scores_value'].to_numpy().reshape(-1, 1))
#data['number_of_reviews'] = standard_scaler.fit_transform(data['number_of_reviews'].to_numpy().reshape(-1, 1))
data['reviews_per_month'] = standard_scaler.fit_transform(data['reviews_per_month'].to_numpy().reshape(-1, 1))

data['beds'] = min_max_scaler.fit_transform(data['beds'].to_numpy().reshape(-1, 1))
data['bedrooms'] = min_max_scaler.fit_transform(data['bedrooms'].to_numpy().reshape(-1, 1))
data['bathrooms'] = min_max_scaler.fit_transform(data['bathrooms'].to_numpy().reshape(-1, 1))
data['accommodates'] = min_max_scaler.fit_transform(data['accommodates'].to_numpy().reshape(-1, 1))
data['host_total_listings_count'] = min_max_scaler.fit_transform(data['host_total_listings_count'].to_numpy().reshape(-1, 1))
data['review_scores_accuracy'] = min_max_scaler.fit_transform(data['review_scores_accuracy'].to_numpy().reshape(-1, 1))
data['review_scores_cleanliness'] = min_max_scaler.fit_transform(data['review_scores_cleanliness'].to_numpy().reshape(-1, 1))
data['review_scores_checkin'] = min_max_scaler.fit_transform(data['review_scores_checkin'].to_numpy().reshape(-1, 1))
data['review_scores_communication'] = min_max_scaler.fit_transform(data['review_scores_communication'].to_numpy().reshape(-1, 1))
data['review_scores_location'] = min_max_scaler.fit_transform(data['review_scores_location'].to_numpy().reshape(-1, 1))
data['review_scores_value'] = min_max_scaler.fit_transform(data['review_scores_value'].to_numpy().reshape(-1, 1))
#data['number_of_reviews'] = min_max_scaler.fit_transform(data['number_of_reviews'].to_numpy().reshape(-1, 1))
data['reviews_per_month'] = min_max_scaler.fit_transform(data['reviews_per_month'].to_numpy().reshape(-1, 1))

"""**Membangun Features Dataset**"""

# One Hot Encoded Features
encoded_features = amenities.columns[1:].to_list()
encoded_features.extend(amenity.columns[1:].to_list())
encoded_features.extend(ohe_neighbourhood_group_cleansed.columns)
encoded_features.extend(ohe_property_type.columns)
encoded_features.extend(ohe_room_type.columns)
encoded_features.extend(ohe_cancellation_policy.columns)
for i in range(4):
    encoded_features.remove('listing_id')

# Standard Scaled Features
scaled_features = ['host_response_rate',
'host_acceptance_rate',
'host_total_listings_count',
'accommodates',
'bathrooms',
'bedrooms',
'beds',
'review_scores_accuracy',
'review_scores_cleanliness',
'review_scores_checkin',
'review_scores_communication',
'review_scores_location',
'review_scores_value',
'reviews_per_month'
]

# Numeric Features
numeric_features = ['latitude',
'longitude',
'price',
'security_deposit',
'cleaning_fee',
'extra_people',
'number_of_reviews'
]

# Categorical Binary Dummies
categorical_features = ['host_is_superhost',
'host_identity_verified',
'instant_bookable'
]

# Constructing the Features Dataset
X = pd.DataFrame(data['listing_id'])
X = pd.merge(X, amenity, on='listing_id')
X = pd.merge(X, ohe_neighbourhood_group_cleansed, on='listing_id')
X = pd.merge(X, ohe_property_type, on='listing_id')
X = pd.merge(X, ohe_room_type, on='listing_id')
X = pd.merge(X, ohe_cancellation_policy, on='listing_id')
X[scaled_features] = data[scaled_features]
X[numeric_features] = data[numeric_features]
X[categorical_features] = data[categorical_features]

"""**Meninjau Dataset yang Disiapkan**"""

X.info(verbose=True)

pd.set_option('display.max_rows', None)
display(X.describe().T)
pd.set_option('display.max_rows', 10)

"""___

### 4. Modelling
"""

import seaborn as sns
import matplotlib.pyplot as plt

# Ambil hanya kolom numerik
numeric_data = data.select_dtypes(include=['float64', 'int64'])

# Tampilkan heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

"""Tampaknya ada kelompok fitur yang berbeda yang menunjukkan tingkat korelasi yang lebih tinggi. Fasilitas yang umum cenderung hadir karena kemungkinan persyaratan hukum atau sebagai standar, sehingga menunjukkan korelasi positif.Selain itu, beberapa fasilitas mewah berkorelasi dengan daftar harga yang lebih tinggi.

Konfigurasi properti (beds, bathrooms) hampir sepenuhnya terkait karena mereka saling bergantung satu sama lain atau dapat diimputasi karena konfigurasi industri standar di pasar perumahan (misalnya 2 bed 1 bath). Struktur harga menunjukkan korelasi yang lebih kuat karena daftar dengan harga tinggi berkorelasi dengan biaya pemeliharaan yang lebih tinggi.
"""

def chart_numeric_feature(dataset, feature):
    fig, ax = plt.subplots(2, sharex=True, gridspec_kw={"height_ratios": (.2, .8)}, figsize=(12, 8))

    sns.boxplot(data=dataset, x=feature, ax=ax[0])
    ax[0].set_title(f'{feature} Distribution Boxplot')

    #sns.histplot(data=dataset x=feature, kde=True, ax=ax[1])
    plt.hist(data[feature], density=True, bins=30)
    ax[1].set_title(f'{feature} Distribution Histogram')

    plt.show()

def chart_numeric_feature_by_target(dataset, target):
    fig, ax = plt.subplots(4, 2, figsize=(20, 50))
    ax = ax.flatten()

    for counter, feature in enumerate(dataset):
        if counter < len(dataset):
            sns.histplot(data=dataset, x=feature, kde=True, hue=target, ax=ax[counter])
            ax[counter].set_title('{} Histogram: {}'.format(feature, target))
        else:
            sns.countplot(data=dataset, x=feature, hue=target, ax=ax[counter])
            ax[counter].set_title('{} Bar Chart: {}'.format(feature, target))

    plt.show()

def chart_categorical_feature(dataset, feature):
    fig, ax = plt.subplots(1, 2, figsize=(12, 6))

    data_ = dataset[dataset[feature].isnull() == False]
    data_ = data_[feature]

    # Bar Chart
    ax[0].bar(x=data_.unique(), height=data_.value_counts())
    ax[0].set_title(f'{feature} Bar Chart')

    # Pie Chart
    data_.value_counts().plot(kind='pie', autopct='%1.2f%%', ax=ax[1])
    ax[1].set_title(f'{feature} Pie Chart')

    plt.show()

chart_numeric_feature(data, 'price')

chart_numeric_feature(data, 'revenue')

chart_numeric_feature(data, 'review_scores_rating')

chart_numeric_feature(data, 'review_scores_accuracy')

chart_numeric_feature(data, 'review_scores_cleanliness')

chart_numeric_feature(data, 'review_scores_checkin')

chart_numeric_feature(data, 'review_scores_communication')

chart_numeric_feature(data, 'review_scores_value')

highest_rated_areas = pd.DataFrame(data['neighbourhood_group_cleansed'].unique(), columns=['area'])
mean_rating = []
mean_revenue = []
mean_latitude = []
mean_longitude = []
for area in highest_rated_areas['area'].unique():
    mean_rating.append(data[data['neighbourhood_group_cleansed'] == area]['review_scores_rating'].mean())
    mean_revenue.append(data[data['neighbourhood_group_cleansed'] == area]['revenue'].mean())
    mean_latitude.append(data[data['neighbourhood_group_cleansed'] == area]['latitude'].mean())
    mean_longitude.append(data[data['neighbourhood_group_cleansed'] == area]['longitude'].mean())
highest_rated_areas['mean_rating'] = mean_rating
highest_rated_areas['mean_revenue'] = mean_revenue
highest_rated_areas['mean_latitude'] = mean_latitude
highest_rated_areas['mean_longitude'] = mean_longitude

highest_rated_areas

"""####**1. Apa saja area dengan peringkat tertinggi untuk memesan akomodasi di Seattle?**"""

plt.scatter(data['latitude'], data['longitude'], alpha=0.1)
plt.scatter(highest_rated_areas['mean_latitude'], highest_rated_areas['mean_longitude'], highest_rated_areas['mean_rating'])
filtered_areas = highest_rated_areas.sort_values('mean_rating', ascending=False)[0:10]
plt.scatter(filtered_areas['mean_latitude'], filtered_areas['mean_longitude'], filtered_areas['mean_rating'] * 1.5)
plt.rcParams['figure.figsize'] = [15, 8]
plt.show()

display(highest_rated_areas[['area', 'mean_rating']].sort_values('mean_rating', ascending=False)[:10])

"""Top 10 lingkungan Terbaik dengan Peringkat Tertinggi terdaftar di atas dalam urutan menurun.

####**2. Apa saja lingkungan dengan revenue tertinggi di Seattle?**
"""

plt.scatter(data['latitude'], data['longitude'], alpha=0.1)
plt.scatter(highest_rated_areas['mean_latitude'], highest_rated_areas['mean_longitude'], highest_rated_areas['mean_revenue'] / 50)
filtered_areas = highest_rated_areas.sort_values('mean_revenue', ascending=False)[0:10]
plt.scatter(filtered_areas['mean_latitude'], filtered_areas['mean_longitude'], filtered_areas['mean_revenue'] / 50)
plt.show()

display(highest_rated_areas[['area', 'mean_revenue']].sort_values('mean_revenue', ascending=False)[:10])

"""Top 10 Lingkungan dengan Pendapatan Tertinggi terdaftar di atas dalam urutan menurun.

####**3. Apa saja fasilitas yang paling banyak disediakan oleh tuan rumah di Seattle?**
"""

amenities['count'] = 0
i = 0
for idx in amenity_types:
    amenities['count'].iloc[i] = amenity['amenity_{}'.format(idx)].sum()
    i += 1

plt.bar(amenities.sort_values('count', ascending=False)[:15]['amenity'], amenities.sort_values('count', ascending=False)[:15]['count'])
plt.xticks(rotation=90)
plt.show()

"""Top 15 Fasilitas Teratas yang Paling Banyak Disediakan tercantum di atas dalam urutan menurun. Asumsinya adalah bahwa beberapa fasilitas diwajibkan oleh hukum, sementara yang lain adalah fasilitas tambahan yang tidak esensial tetapi berpotensi menarik bagi tamu.

Kecuali beberapa fasilitas yang mungkin diwajibkan oleh undang-undang Negara Bagian Washington seperti smoke detectors, carbon monoxide detectors, dan fire extinguishers, penyediaan fasilitas yang ditampilkan dalam grafik di atas dalam urutan menurun berdasarkan ketersediaan keseluruhan, menunjukkan beberapa kenyamanan paling populer yang dapat dinikmati para pengunjung ke Seattle di Airbnb.

Ini dapat ditafsirkan untuk mengidentifikasi baseline spesifik untuk fasilitas yang perlu ditawarkan oleh tuan rumah agar dapat bersaing di pasar.

####**Linear Regression**

Karena kita fokus pada Linear Regression dengan pertanyaan bisnis yang mencari inference daripada prediksi. Menggunakan pemisahan observasi untuk memastikan banyak kekuatan penjelasan dapat diambil dari daftar fitur untuk menentukan feature importance. Mengekstrak koefisien (beta parameters) dari Linear Regression untuk interpretasi ringan dan untuk memahami besaran serta arah dampak pada target.

Signifikansi statistik dapat diperoleh jika menulis fungsi tambahan yang menghitung P-values, karena scikit-learn tidak khusus untuk non-predictive modelling. Namun, untuk tujuan project ini, telah membatasi hanya pada pengamatan koefisien dalam menjawab pertanyaan bisnis yang menarik.
"""

import sklearn.metrics as metrics
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

def display_results(y_true, y_pred):
    rsq = metrics.r2_score(y_true, y_pred)
    mae = metrics.mean_absolute_error(y_true, y_pred)
    mse = metrics.mean_squared_error(y_true, y_pred)

    print('R-Sq: ', round(rsq, 4))
    print('MAE: ', round(mae, 4))
    print('MSE: ', round(mse, 4))
    print('RMSE: ', round(np.sqrt(mse), 4))

"""####**4. Skor mana yang paling penting untuk ratings keseluruhan?(Linear Regression)**"""

sns.heatmap(data[['review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value']].corr(), annot=True)

pd.DataFrame(data[['review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value']].corr()[1:7]['review_scores_rating'])

"""Peringkat ulasan positif berkorelasi positif dengan semua skor komposit hingga tingkat yang bervariasi."""

model = LinearRegression()

x = ['review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value']

X_train, X_test, y_train, y_test = train_test_split(data[x], data['review_scores_rating'], test_size = 0.2, random_state=42)

model.fit(X_train, y_train)

display_results(y_test, model.predict(X_test))

"""Tampaknya melakukan regresi pada dataset pelatihan menunjukkan bahwa skor riview komponen menjelaskan 56,76% dari peringkat riview keseluruhan untuk dataset uji dalam model linear regression ini. Saat ini tidak mempertimbangkan P-values untuk menentukan apakah regressor secara statistik signifikan, tetapi hanya mengamati model coefficients untuk menentukan tingkat dampak regressor terhadap penilaian keseluruhan."""

coefficients = pd.DataFrame(x, columns=['regressor'])
coefficients['coefficient'] = model.coef_
plt.bar(coefficients.sort_values('coefficient', ascending=False)['regressor'], coefficients.sort_values('coefficient', ascending=False)['coefficient'])
plt.xticks(rotation=90)
plt.show()

"""Tiga faktor riview teratas yang mempengaruhi penilaian keseluruhan untuk seorang tuan rumah adalah:

1. Value
2. Cleanliness
3. Accuracy

Ini menyiratkan bahwa tamu memberikan bobot lebih pada nilai untuk uang dari masa tinggal mereka, kebersihan akomodasi yang disediakan oleh tuan rumah, dan sejauh mana deskripsi tuan rumah tentang akomodasi mereka sesuai dengan deskripsi yang diberikan saat menentukan skor keseluruhan mereka untuk masa tinggal.

Ini berbeda dari correlation matrix yang menunjukkan bahwa pengalaman check-in adalah kontributor ketiga yang paling terkait dengan penilaian keseluruhan, tetapi sebaliknya relatif cocok dengan 2/3 kontributor kecuali dalam urutan dampak koefisien.

Tuan rumah yang ingin meningkatkan peringkat keseluruhan mereka dapat lebih berusaha untuk menjaga kebersihan tempat mereka dan memberikan informasi yang sangat deskriptif tentang daftar mereka di Airbnb. Mereka juga dapat menawarkan tarif yang kompetitif sesuai dengan kemampuan mereka.

####**5. Apakah tuan rumah dengan ratings lebih tinggi secara keseluruhan menghasilkan revenue lebih tinggi?(Linear Regression)**
"""

sns.heatmap(data[['revenue', 'review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value']].corr(), annot=True)

"""Tampaknya tidak ada korelasi antara revenue dan peringkat komposit / peringkat komponen dari para penyelenggara."""

model = LinearRegression()

x = ['review_scores_rating', 'review_scores_accuracy', 'review_scores_cleanliness', 'review_scores_checkin', 'review_scores_communication', 'review_scores_location', 'review_scores_value']

X_train, X_test, y_train, y_test = train_test_split(data[x], data['revenue'], test_size=0.2, random_state=42)

model.fit(X_train, y_train)

display_results(y_test, model.predict(X_test))

coefficients = pd.DataFrame(x, columns=['regressor'])
coefficients['coefficient'] = model.coef_
plt.bar(coefficients.sort_values('coefficient', ascending=False)['regressor'], coefficients.sort_values('coefficient', ascending=False)['coefficient'])
plt.xticks(rotation=90)
plt.show()

"""Pada awalnya, daftar dengan peringkat nilai untuk uang yang tinggi tampak terkait dengan dampak negatif terhadap estimasi revenue. Sebaliknya, peringkat positif untuk check-in experience, location, openness in communication of the host, dan cleanliness berhubungan positif dengan revenue yang diperoleh, termasuk peringkat keseluruhan yang berkaitan dengan peningkatan revenue terendah. Namun, Listings dengan deskripsi akurat justru menunjukkan dampak negatif terhadap revenue. Meski demikian, karena kekuatan penjelasan fitur sangat rendah yaitu hanya 0,11%, kesalahan residual sangat tinggi, dan koefisien tidak signifikan, maka efek peringkat riview terhadap revenue tidak dapat diinterpretasikan secara meyakinkan. Ini menunjukkan bahwa faktor lain di luar penilaian pengguna kemungkinan lebih berperan dalam menentukan potensi revenue sebuah Listings.

####**6. Fasilitas, karakteristik perumahan, dan faktor apa yang berkontribusi positif terhadap revenue?(Linear Regression)**
"""

target_revenue = pd.DataFrame(data['revenue'])
target_rating = pd.DataFrame(data['review_scores_rating'])

X.drop(['listing_id', 'nbdg_Other neighborhoods', 'property_Other', 'room_Shared room', 'cancel_flexible'], axis=1, inplace=True)

"""GLMs memerlukan penghapusan satu kolom kategorikal (one-hot encoded) dalam setiap set untuk mencegah collinearity sempurna."""

model = LinearRegression()

X_train, X_test, y_train, y_test = train_test_split(X, target_revenue, test_size=0.2, random_state=42)

model.fit(X_train, y_train)

display_results(y_test, model.predict(X_test))

"""Tampaknya melakukan regression pada dataset pelatihan menunjukkan bahwa regressors yang terdaftar menjelaskan 23,34% dari data uji di luar sampel untuk perkiraan revenue keseluruhan dalam model linear regression ini. Saat ini tidak mempertimbangkan P-values untuk menentukan apakah regressors signifikan secara statistik, tetapi hanya mengamati model coefficients untuk menentukan tingkat dampak regressor terhadap peringkat keseluruhan.

"""

coefficients = pd.DataFrame(X.columns.to_list(), columns=['regressor'])
coefficients['coefficient'] = model.coef_.T
plt.bar(coefficients.sort_values('coefficient', ascending=False)['regressor'], coefficients.sort_values('coefficient', ascending=False)['coefficient'])
plt.xticks(rotation=90)
plt.show()

pd.set_option('display.max_rows', None)
display(coefficients.sort_values('coefficient', ascending=False)[:25])
pd.set_option('display.max_rows', 10)

"""Top 25 fasilitas, karakteristik perumahan, dan faktor serupa yang paling berkontribusi positif terhadap revenue tuan rumah Airbnb ditampilkan dalam diagram batang di atas.

Revenue Airbnb cenderung lebih tinggi untuk daftar dengan kebijakan pembatalan ketat dan host berstatus Super Host, yang menunjukkan bahwa verifikasi host dan penegakan aturan dapat menarik tamu berkualitas. Peringkat pengalaman check-in juga berhubungan positif dengan revenue.

Selain itu, listings bertipe "Seluruh Rumah atau Apartemen" berkontribusi signifikan terhadap revenue, karena properti utuh lebih diminati dan dihargai lebih tinggi. Karakteristik properti perumahan tertentu juga menjadi faktor penting dalam meningkatkan revenue. Sifat dari properti perumahan tertentu yang terdaftar di Airbnb sangat terkait dengan kontribusi positif sebagai fitur yang menjelaskan revenue termasuk:

- Chalet
- Tent
- Cabin
- Apartment
- House
- Bed & Breakfast
- Townhouse
- Dormitory
- Bungalow
- Treehouse
- Yurt

Tempat tinggal alternatif atau akomodasi mewah menciptakan pengalaman homestay yang menarik atau unik, yang tidak selalu ditawarkan oleh hotel yang mungkin beroperasi untuk mengurangi risiko bagi tamu dan menawarkan pengalaman yang paling konsisten terlepas dari lokasi di dunia. Pengamatan ini membenarkan proposisi nilai unik yang dapat ditawarkan oleh Airbnb di industri ini.

Fasilitas yang berharga dalam urutan nilai menurun yang berhubungan positif dengan revenue termasuk:

- Doorman
- Other Pets
- Hot Tub
- Breakfast
- Washer
- Laptop-friendly Workplace
- Pool
- Buzzer / Wireless Intercom
- Washer & Dryer

Fasilitas tertentu menjadi indikator penting dalam menarik tamu di Airbnb. Fitur seperti petugas keamanan dan interkom mewakili keamanan, sementara bak mandi air panas, tempat kerja jarak jauh, kolam renang, dan sarapan gratis melambangkan kenyamanan dan kemewahan yang dicari tamu. Revenue lebih tinggi ditemukan pada listings dengan kebijakan pembatalan ketat, status Super Host, pengalaman check-in positif, dan tipe kamar "Seluruh Rumah atau Apartemen", karena properti utuh lebih diminati. Tidak ada lingkungan spesifik yang secara signifikan meningkatkan revenue, namun properti di West Seattle, Magnolia, Delridge, Rainier Valley, dan Seward Park cenderung menghasilkan revenue lebih rendah. Faktor-faktor ini tercermin dalam daftar dan grafik fasilitas, karakteristik perumahan, serta elemen lain yang paling berkontribusi positif terhadap revenue.

Sifat dari properti perumahan tertentu yang terdaftar di Airbnb sangat terkait dengan kontribusi positif sebagai fitur yang menjelaskan revenue termasuk:
1. Chalet
2. Tent
3. Cabin
4. Apartment
5. House
6. Bed & Breakfast
7. Townhouse
8. Dormitory
9. Bungalow
10. Treehouse
11. Yurt

Fasilitas yang berharga dalam urutan nilai menurun yang berasosiasi positif dengan revenue meliputi:
1. Doorman
2. Other Pets
3. Hot Tub
4. Breakfast
5. Washer
6. Laptop-friendly Workplace
7. Pool
8. Buzzer / Wireless Intercom
9. Washer & Dryer

####**7. Fasilitas, karakteristik perumahan, dan faktor apa yang berkontribusi positif terhadap ratings?(Analisis Linear Regression)**
"""

model = LinearRegression()

X_train, X_test, y_train, y_test = train_test_split(X, target_rating, test_size=0.2, random_state=42)

model.fit(X_train, y_train)

display_results(y_test, model.predict(X_test))

"""Tampaknya melakukan regression pada dataset pelatihan menunjukkan bahwa regressors yang terdaftar menjelaskan 56,24% dari data uji untuk perkiraan revenue keseluruhan dalam model linier regression ini. Saat ini tidak mempertimbangkan P-values untuk menentukan apakah regressors secara statistik signifikan, tetapi hanya mengamati model coefficients untuk menentukan tingkat dampak regressors terhadap peringkat keseluruhan."""

coefficients = pd.DataFrame(X.columns.to_list(), columns=['regressor'])
coefficients['coefficient'] = model.coef_.T
plt.bar(coefficients.sort_values('coefficient', ascending=False)['regressor'], coefficients.sort_values('coefficient', ascending=False)['coefficient'])
plt.xticks(rotation=90)
plt.show()

pd.set_option('display.max_rows', None)
display(coefficients.sort_values('coefficient', ascending=False)[:25])
pd.set_option('display.max_rows', 10)

"""Hasil regression menunjukkan bahwa model dapat menjelaskan 56,24% dari data uji terkait estimasi revenue keseluruhan. Meskipun P-value tidak dianalisis, koefisien regressors menunjukkan pengaruh terhadap rating keseluruhan.

Top 25 fasilitas, karakteristik hunian, dan faktor terkait yang paling berkontribusi positif terhadap rating host Airbnb ditampilkan pada diagram batang. Rating cenderung lebih tinggi untuk listing dengan host berstatus Super Host dan terverifikasi, karena ini memberi rasa aman dan kepercayaan bagi tamu.

Selain itu, rating untuk nilai, kebersihan, akurasi deskripsi, komunikasi host, pengalaman check-in, dan lokasi semuanya memiliki kontribusi positif terhadap rating keseluruhan.

Menariknya, properti bergaya asrama juga mendapat rating tinggi, begitu pula rumah dengan lebih banyak kamar mandi, menandakan tamu menghargai aspek sosial maupun privasi dan aksesibilitas.

Selain itu, fasilitas yang disediakan yang cenderung mendapatkan peringkat lebih tinggi adalah sebagai berikut:

- Washer & Dryer
- Elevator
- Pets live on property
- Suitable for Events
- Other Pets allowed
- Safety Card
- Kitchen
- Smoker-friendly

Lingkungan dengan rating positif meliputi Rainier Valley, Central Area, Beacon Hill, Delridge, West Seattle, dan Capitol Hill. Menariknya, beberapa wilayah ini sebelumnya diasosiasikan dengan pendapatan rendah.

Hal ini bisa menunjukkan bahwa lokasi tersebut tetap diminati karena nilai lokasinya bagi tamu, meskipun pendapatannya rendah karena harga sewa lebih murah atau tingkat occupancy yang tidak konsisten.

Alternatif lainnya, lingkungan-lingkungan ini mungkin berada di area perkotaan yang strategis namun mahal, sehingga meskipun jarang disewa, tetap mendapat rating tinggi. Contohnya, Capitol Hill, Central Area, dan Rainier Valley menunjukkan kombinasi rating tinggi dan pendapatan tinggi, mencerminkan harga dan occupancy yang sama-sama tinggi.

___

### 5. Evaluation Model
"""

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

def evaluate_model(y_true, y_pred, model_name="Model"):
    print(f"--- Evaluation for {model_name} ---")
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)

    print(f"MAE  (Mean Absolute Error): {mae:.2f}")
    print(f"MSE  (Mean Squared Error): {mse:.2f}")
    print(f"RMSE (Root Mean Squared Error): {rmse:.2f}")
    print(f"R²   (R-squared): {r2:.4f}\n")

y_pred = model.predict(X_test)
evaluate_model(y_test, y_pred, model_name="Linear Regression - Revenue Prediction")

results = pd.DataFrame(columns=["Model", "MAE", "MSE", "RMSE", "R2"])

def log_result(model_name, y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_true, y_pred)
    results.loc[len(results)] = [model_name, mae, mse, rmse, r2]

log_result("Linear Regression - Rating Prediction", y_test, y_pred)
display(results)

"""Hasil evaluasi model linear regression menunjukkan bahwa model mampu menjelaskan sekitar 56,23% variasi data pada prediksi rating properti Airbnb di Seattle.

Nilai MAE sebesar 2,30 dan RMSE sebesar 3,71 mengindikasikan bahwa rata-rata kesalahan prediksi cukup kecil dibandingkan dengan rentang nilai target.

Secara keseluruhan, performa model sudah cukup baik untuk analisis eksploratif, meskipun masih terdapat ruang untuk perbaikan dengan pendekatan model yang lebih kompleks.
"""

y_true = y_test.squeeze()

residuals = y_true - y_pred.flatten()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_pred.flatten(), y=residuals)
plt.axhline(0, linestyle='--', color='red')
plt.xlabel("Predicted Revenue")
plt.ylabel("Residuals")
plt.title("Residual Plot - Revenue Prediction")
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_true, y=y_pred.flatten())
plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()],
         '--', color='red')
plt.xlabel("Actual Revenue")
plt.ylabel("Predicted Revenue")
plt.title("Actual vs Predicted - Revenue")
plt.show()

residuals_rating = y_test['review_scores_rating'] - y_pred.flatten()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_pred.flatten(), y=residuals_rating)
plt.axhline(0, linestyle='--', color='red')
plt.xlabel("Predicted Rating")
plt.ylabel("Residuals")
plt.title("Residual Plot - Rating Prediction")
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test['review_scores_rating'], y=y_pred.flatten())
plt.plot([y_test['review_scores_rating'].min(), y_test['review_scores_rating'].max()],
         [y_test['review_scores_rating'].min(), y_test['review_scores_rating'].max()],
         '--', color='red')
plt.xlabel("Actual Rating")
plt.ylabel("Predicted Rating")
plt.title("Actual vs Predicted - Rating")
plt.show()